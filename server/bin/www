#!/usr/bin/env node
require('dotenv').load({silent: true});
const debug = require('debug')('perf-widget:bin:www');

const start = Date.now();
const app = require('../app');
app.ready.then(function () {
	const end = Date.now();
	debug('start:', start, 'end:', end, 'duration:', end - start);
	const http = require('http');

	/**
	 * Normalize a port into a number, string, or false.
	 */
	const normalizePort = val => {
		const port = parseInt(val, 10);

		if (isNaN(port)) {
			// named pipe
			return val;
		} else if (port >= 0) {
			// port number
			return port;
		} else {
			return false;
		}
	}


	/**
	 * Get port from environment and store in Express.
	 */
	const port = normalizePort(process.env.PORT || '3000');
	process.env.PORT = port;

	/**
	 * Create HTTP server.
	 */
	const server = http.createServer(app);

	/**
	 * Listen on provided port, on all network interfaces.
	 */
	server.listen(port);
	server.on('error', function onError(error) {
		if (error.syscall !== 'listen') {
			throw error;
		}

		const bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port;

		// handle specific listen errors with friendly messages
		switch (error.code) {
			case 'EACCES':
				console.error(bind + ' requires elevated privileges');
				process.exit(1);
				break;
			case 'EADDRINUSE':
				console.error(bind + ' is already in use');
				process.exit(1);
				break;
			default:
				throw error;
		}
	});

	server.on('listening', function onListening() {
		const addr = server.address();
		const bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
		debug('Listening on ' + bind);
	});

});
